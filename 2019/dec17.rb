#! /usr/bin/env ruby

require './intcode.rb'
require './input.rb'

ints = get_single_line_input_int_arr(__FILE__, separator: ',')

cpu = Intcode.new(ints)

str = ""

loop do
  output = cpu.run
  break if output[:state] == Intcode::DONE
  str += eval("\"\\x#{output[:value].to_s(16)}\"")
end

scaffold = {}
robot_start = nil

str.split("\n").each.with_index do |line, y|
  line.split('').each.with_index do |ch, x|
    scaffold[[x, y]] = ch if ch != '.'
    robot_start = [x, y] if ch == '^'
  end
end

alignments = 0

scaffold.each do |pos, ch|
  if ch == '#'
    x, y = pos
    if scaffold[[x + 1, y]] == '#' &&
        scaffold[[x - 1, y]] == '#' &&
        scaffold[[x, y + 1]] == '#' &&
        scaffold[[x, y - 1]] == '#'
      alignments += x * y
    end
  end
end

puts alignments

# Part 2

ints[0] = 2
cpu = Intcode.new(ints)

max_path = ['R']
curr_dir = [1, 0]
curr_len = 0
curr_pos = robot_start

def right(dir)
  x, y = dir
  [-y, x]
end

def left(dir)
  x, y = dir
  [y, -x]
end

loop do
  x, y = curr_pos
  next_pos = [x + curr_dir[0], y + curr_dir[1]]
  if scaffold[next_pos] == '#'
    curr_pos = next_pos
    curr_len += 1
  else
    right_dir = right(curr_dir)
    right_pos = [x + right_dir[0], y + right_dir[1]]
    left_dir = left(curr_dir)
    left_pos = [x + left_dir[0], y + left_dir[1]]

    if scaffold[right_pos] == '#'
      curr_dir = right_dir
      max_path << curr_len
      max_path << 'R'
      curr_len = 0
    elsif scaffold[left_pos] == '#'
      curr_dir = left_dir
      max_path << curr_len
      max_path << 'L'
      curr_len = 0
    else
      max_path << curr_len
      break
    end
  end
end

max_path = max_path.each_slice(2).map {|turn, distance| "#{turn},#{distance},"}

MAX_LENGTH = 20

def can_create_from_functions?(rest, a, b, c, prefix_cmds=[])
  return prefix_cmds if rest.empty?
  return nil if prefix_cmds.length >= MAX_LENGTH / 2

  if rest.start_with?(a)
    rest_cmds = can_create_from_functions?(
      rest[a.length..-1], a, b, c, prefix_cmds + ['A'])
    return rest_cmds if rest_cmds
  end

  if rest.start_with?(b)
    rest_cmds = can_create_from_functions?(
      rest[b.length..-1], a, b, c, prefix_cmds + ['B'])
    return rest_cmds if rest_cmds
  end

  if rest.start_with?(c)
    rest_cmds = can_create_from_functions?(
      rest[c.length..-1], a, b, c, prefix_cmds + ['C'])
    return rest_cmds if rest_cmds
  end
end

all_substrings = []

[1, 2, 3, 4, 5].each do |slice_length|
  (0...(max_path.length - (slice_length - 1))).each do |start|
    fun = max_path[start...(start + slice_length)].join('')[0...-1]
    if fun.length <= MAX_LENGTH
      all_substrings << max_path[start...(start + slice_length)].join('')
    end
  end
end

max_path_str = max_path.join('')

a, b, c, path = nil

all_substrings.combination(3) do |substrs|
  a, b, c = substrs
  path = can_create_from_functions?(max_path_str, a, b, c)
  break if path
end

main_routine = path.join(',') + "\n"
fun_a = a[0...-1] + "\n"
fun_b = b[0...-1] + "\n"
fun_c = c[0...-1] + "\n"


input = main_routine.bytes + fun_a.bytes + fun_b.bytes + fun_c.bytes + "n\n".bytes

next_input = []
last_output = nil
loop do
  output = cpu.run(next_input)
  if output[:state] == Intcode::DONE
    break
  end

  if output[:state] == Intcode::AWAITING_INPUT
    next_input = [input.shift]
  elsif output[:state] == Intcode::OUTPUT
    last_output = output[:value]
    next_input = []
  end
end

puts last_output


__END__
1,330,331,332,109,3546,1101,0,1182,15,1101,1481,0,24,1001,0,0,570,1006,570,36,102,1,571,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,15,1,15,1008,15,1481,570,1006,570,14,21102,58,1,0,1106,0,786,1006,332,62,99,21101,0,333,1,21101,0,73,0,1106,0,579,1101,0,0,572,1101,0,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1002,574,1,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1105,1,81,21102,1,340,1,1106,0,177,21102,1,477,1,1106,0,177,21101,0,514,1,21102,1,176,0,1105,1,579,99,21102,1,184,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,102,1,572,1182,21102,375,1,1,21101,211,0,0,1106,0,579,21101,1182,11,1,21101,0,222,0,1106,0,979,21102,388,1,1,21102,1,233,0,1106,0,579,21101,1182,22,1,21102,1,244,0,1106,0,979,21101,0,401,1,21102,255,1,0,1106,0,579,21101,1182,33,1,21102,266,1,0,1105,1,979,21102,414,1,1,21102,1,277,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21102,1,1182,1,21102,1,313,0,1105,1,622,1005,575,327,1102,1,1,575,21101,0,327,0,1106,0,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,12,18,0,109,4,2102,1,-3,587,20101,0,0,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1106,0,597,109,-4,2106,0,0,109,5,2102,1,-4,630,20102,1,0,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,653,20102,1,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21101,0,702,0,1105,1,786,21201,-1,-1,-1,1106,0,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,731,1,0,1105,1,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21102,1,756,0,1105,1,786,1105,1,774,21202,-1,-11,1,22101,1182,1,1,21101,0,774,0,1106,0,622,21201,-3,1,-3,1106,0,640,109,-5,2106,0,0,109,7,1005,575,802,21001,576,0,-6,20102,1,577,-5,1106,0,814,21102,1,0,-1,21102,0,1,-5,21102,0,1,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,59,-3,22201,-6,-3,-3,22101,1481,-3,-3,2101,0,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21102,1,1,-1,1105,1,924,1205,-2,873,21102,35,1,-4,1105,1,924,2101,0,-3,878,1008,0,1,570,1006,570,916,1001,374,1,374,1202,-3,1,895,1101,0,2,0,2101,0,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,921,21002,0,1,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,59,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,35,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,0,1,575,21102,973,1,0,1105,1,786,99,109,-7,2105,1,0,109,6,21101,0,0,-4,21102,0,1,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1106,0,1041,21102,1,-4,-2,1106,0,1041,21101,0,-5,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1202,-2,1,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,1202,-2,1,0,1105,1,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21101,0,439,1,1106,0,1150,21102,477,1,1,1106,0,1150,21101,0,514,1,21102,1,1149,0,1105,1,579,99,21101,0,1157,0,1106,0,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2101,0,-5,1176,1201,-4,0,0,109,-6,2105,1,0,6,13,27,13,6,1,11,1,27,1,11,1,6,1,11,1,27,1,11,1,6,1,11,1,27,1,11,1,6,1,11,1,27,1,11,1,6,1,11,1,27,1,11,1,6,1,11,1,1,9,9,11,9,1,6,1,11,1,1,1,7,1,9,1,7,1,1,1,9,1,6,1,11,13,7,1,7,1,1,1,9,1,6,1,13,1,7,1,1,1,7,1,7,1,1,1,9,1,6,1,13,1,7,1,1,1,5,11,1,1,9,1,6,1,13,1,7,1,1,1,5,1,1,1,9,1,9,1,6,11,3,1,7,1,1,1,5,1,1,1,9,1,1,9,16,1,3,1,7,1,1,1,5,1,1,1,9,1,1,1,24,1,3,1,7,13,7,1,1,1,24,1,3,1,9,1,5,1,1,1,1,1,7,1,1,1,24,1,3,1,9,9,1,1,7,11,16,1,3,1,15,1,3,1,9,1,7,1,12,9,15,1,3,1,9,1,7,1,16,1,19,1,3,1,9,1,7,1,16,1,19,11,3,1,7,1,16,1,23,1,5,1,3,1,7,1,8,9,23,11,7,1,8,1,37,1,11,1,8,1,37,1,11,1,8,1,37,1,11,1,8,1,37,1,11,1,8,1,37,1,11,1,8,1,37,13,8,1,58,1,58,1,58,1,58,1,50,9,50
